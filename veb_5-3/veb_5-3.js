// Переменные объявленные через "var"

// Первым отличием "var" от "let" и "const" является то, что у переменных объявленных через "let" и "const" - ограничение по области видимости внутри блока, а у "var" - ограничения по области видимости НЕТ. В результате чего, даже служебные переменные, которые используются в цикле для счетчика итераций цыкла - являются доступными сущностями вне цыкла, что безусловно НЕ удобно и может привести к путанице или ошибкам в слачае использования, например, нескольких цыклов в скрипте или других операциях. Следовательно, для каждого отдельного цыкла - нужно будет создавать свою служебную переменную.

for (var i = 0; i < 5; i += 1) {
    console.log('Лог внутри тела цыкла -', i);
};

console.log('Лог за пределами цыкла ->', i);
console.log('-------------------------------------------');

// Второй особенностью объявления переменных через "var", является "хостинг" или "всплытие" (возможность использование некой сущности в коде, не зависимо от места ее объявление в коде - в начале или конце). При этом, переменная объявленная через "var", по умолчанию до места ее нахождения в коде - имеет служебное значение "undefined", и только после точки своего объявления - несет в себе присвоенное в коде значение.

console.log('Выводим переменную "boo" до ее объявления в коде =>', boo);

var boo = 10;

console.log('Выводим переменную "boo" после ее объявления в коде =>', boo);

// Важным в этом примере является то, что в результате обращения к переменной перед ее объявлением - НЕ возникнит ошибка, а это НЕ позволит найти проблемы в коде при необходимости.
console.log('-------------------------------------------');

// Третей особенностью "var" является то, что переменные объявленные через это служебное слово - ограничиваются функциональной областью видимости, т.е. за пределами функций - они НЕ видны, и попытки их вызвать за пределами тела функции в которой они задействованы - вызывает ошибку!

function foo() {
    // Функциональная область видимости
    var a = 6;
    return a;
};

console.log('Вызов функции "foo()" =>', foo());

// console.log(a); // Попытка вывести в лог значение переменной "a", за пределами тела функции "foo()" - вызовет ошибку!

console.log('********************************************');


//!=========================================================


// Функция которая вызывает сама себя.
// Подобные функции используются редко и имеют своеобразный синтаксис записи. В основу этого синтаксиса положена группа из 2-х "пузатых" скобок, где в первых скабках пишется сама функция, а во вторых - значение аргумента, который передается в параметр функции находящейся в первой скобке. Таким образом, данная функция автоматически срабатывает при инициализации скрипта.

// Пример записи самовызыващейся функции.
(function (num) {
    console.log(num ** 2);
})(5);

console.log('********************************************');


//!=========================================================

// Чистая функция - это функция, которая не имеет "сайд" эфектов, т.е. такая функция не изменяет переменные, которые находятся за пределами тела функции. При этом, чистая функция с одними и теми же аргументами выдает одинаковый результат. Второй отличительной чертой чистых функций является то, что они не используют переменные из глобальной области видимости (т.е. переменные, которые находятся за пределами тела функции), она использует только те переменные которые находятся внутри тела самой функции. Третей особенностью - является то, что она НЕ изменяет переменные, которые находятся за пределами ее тела (например, она не изменяет исходный массив чисел, который был передан в нее как аргумент). Такая функция не обращается к внешним переменным, не изменяет их и работает только с тем, что к ней приходит в качестве аргумента и находится внутри нее. В следствии чего, результат работы "чистой" функции - всегда можно предвидеть!

// Пример "грязной" или "НЕ чистой" функции:
let a = 5;

function sum1(num) {
    return a + num;
};

console.log(sum1(10));
// Данная функция "sum1" является "грязной" - т.к. использует в своем коде переменную "a", которая находится за пределами тела функции, и если ее значение изменить, то результат работы функции - тоже изменится.


console.log('********************************************');


//!=========================================================


// Перечень вопросов, которые задают на собеседовании: dou.ua/lenta/articles/interview-questions-javascript-developer/
// Видео -


//!=========================================================


// Рекомендуемые Ютуб-каналы по изучению JS:
// 1 - "Programming with Mosh..."
// 2 - "Alek OS"


//!=========================================================


